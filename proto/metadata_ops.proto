/*
 *  Copyright (C) 2024 github.com/chel-data
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

syntax = "proto3";
package metadata_ops;

message NodeId {
  uint64 lo = 1;
  uint64 hi = 2;
}

message Attrs {
  optional uint32 mode = 1;
  optional uint32 uid = 2;
  optional uint32 gid = 3;
  optional uint64 size = 4;
  optional uint64 atime = 5;
  optional uint64 atime_nano = 6;
  optional uint64 mtime = 7;
  optional uint64 mtime_nano = 8;
  optional uint64 ctime = 9;
  optional uint64 ctime_nano = 10;
}

message RpcResult {
  uint32 code = 1;
  optional string reason = 2;
}

message NodeInfo {
  NodeId node = 1;
  Attrs attrs = 2;
}

message DirEntryInfo {
  bytes name = 1;
  optional NodeInfo node = 2;
}

message DirEntryInfoSet {
  repeated DirEntryInfo entries = 2;
}

message OpenHandle {
  uint64 lo = 1;
  uint64 hi = 2;
}

message DirEntry {
  NodeId parent = 1;
  bytes name = 2;
}

message GlobalDirEntry {
  string poolId = 1;
  string contId = 2;
  DirEntry entry = 3;
}

message GetAttrResponse {
  RpcResult res = 1;
  optional NodeInfo nodeInfo = 2;
}

message GlobalNodeId {
  string poolId = 1;
  string contId = 2;
  NodeId node = 3;
}

message SetAttrRequest {
  string poolId = 1;
  string contId = 2;
  DirEntry entry = 3;
  Attrs attrs = 4;
}

message ReadLinkResponse {
  RpcResult res = 1;
  optional bytes target = 2;
}

message MakeNodeRequest {
  string poolId = 1;
  string contId = 2;
  DirEntry node = 3;
  uint32 mode = 4;
}

message MakeNodeResponse {
  RpcResult res = 1;
  optional NodeInfo nodeInfo = 2;
}

message SymlinkRequest {
  string poolId = 1;
  string contId = 2;
  DirEntry link = 3;
  bytes target_name = 4;
}

message SymlinkResponse {
  RpcResult res = 1;
  optional NodeInfo nodeInfo = 2;
}

message RenameRequest {
  string poolId = 1;
  string contId = 2;
  DirEntry old = 3;
  DirEntry new = 4;
  uint32 flags = 5;
}

message LinkRequest {
  string poolId = 1;
  string contId = 2;
  NodeId source = 3;
  DirEntry target = 4;
}

message LinkResponse {
  RpcResult res = 1;
  optional NodeInfo nodeInfo = 2;
}

message OpenNodeResponse {
  RpcResult res = 1;
  optional OpenHandle handle = 2;
}

message ReadDirRequest {
  string poolId = 1;
  string contId = 2;
  NodeId dir = 3;
  OpenHandle handle = 4;
  uint64 offset = 5;
}

message ReadDirResponse {
  RpcResult res = 1;
  optional DirEntryInfoSet entries = 2;
}

message ReleaseDirRequest {
  string poolId = 1;
  string contId = 2;
  NodeId dir = 3;
  OpenHandle handle = 4;
}

message OpenRequest {
  string poolId = 1;
  string contId = 2;
  NodeId file = 3;
  uint32 flags = 4;
}

message CloseRequest {
  string poolId = 1;
  string contId = 2;
  NodeId file = 3;
  OpenHandle handle = 4;
}

service MetadataOps {
  rpc GetAttr(GlobalDirEntry) returns (GetAttrResponse);
  rpc SetAttr(SetAttrRequest) returns (RpcResult);
  rpc ReadLink(GlobalNodeId) returns (ReadLinkResponse);
  rpc MakeNode(MakeNodeRequest) returns (MakeNodeResponse);
  rpc Unlink(GlobalDirEntry) returns (RpcResult);
  rpc RemoveDir(GlobalDirEntry) returns (RpcResult);
  rpc Symlink(SymlinkRequest) returns (SymlinkResponse);
  rpc Rename(RenameRequest) returns (RpcResult);
  rpc Link(LinkRequest) returns (LinkResponse);
  rpc OpenDir(GlobalNodeId) returns (OpenNodeResponse);
  rpc ReadDir(ReadDirRequest) returns (ReadDirResponse);
  rpc ReleaseDir(ReleaseDirRequest) returns (RpcResult);
  rpc ReadDirPlus(ReadDirRequest) returns (ReadDirResponse);
  rpc Open(OpenRequest) returns (OpenNodeResponse);
  rpc Close(CloseRequest) returns (RpcResult);
}